import calendar
import locale

from typing import Optional, List
from loader import Locale, Currency
from datetime import date, timedelta
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from telebot.callback_data import CallbackData
from sys import platform


destination_callback = CallbackData('destination_id', prefix='destination')
photo_callback = CallbackData('answer', prefix='photo')
date_choice_callback = CallbackData('year', 'month', 'day', prefix='date_choice')
change_month_callback = CallbackData('year', 'month', prefix='change_month')

EMTPY_FIELD = '1'

if platform == 'win32':
    locale.setlocale(locale.LC_TIME, ('Russian_Russia', '1251'))
elif platform == 'darwin':
    locale.setlocale(locale.LC_TIME, ('ru_RU', 'UTF-8'))

WEEK_DAYS = [calendar.day_abbr[i] for i in range(7)]
MONTHS = [(i, calendar.month_name[i]) for i in range(1, 13)]


def settings_markup(mode: str = 'main', current: Optional[str] = None) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é settings.
    :param mode: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –º–µ–Ω—é –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–æ–∑–¥–∞—é—Ç—Å—è –∫–Ω–æ–ø–∫–∏ (–º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è main, locale, currency)
    :param current: —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ë–î (–ø–æ–º–µ—á–∞–µ—Ç—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏)
    :return: markup
    :rtype: InlineKeyboardMarkup
    """
    markup = InlineKeyboardMarkup()
    if mode == 'main':
        markup.add(InlineKeyboardButton('—è–∑—ã–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ (locale)', callback_data='settings:main:locale'))
        markup.add(InlineKeyboardButton('–≤–∞–ª—é—Ç–∞ (currency)', callback_data='settings:main:currency'))
        markup.add(InlineKeyboardButton('‚ùå –í—ã—Ö–æ–¥', callback_data='settings:main:exit'))
    elif mode == 'locale':
        for elem in Locale:
            if current == elem.name:
                markup.add(InlineKeyboardButton(f'{elem.value} ‚òë', callback_data=f'settings:locale:{elem.name}'))
            else:
                markup.add(InlineKeyboardButton(f'{elem.value}', callback_data=f'settings:locale:{elem.name}'))
        markup.add(InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='settings:locale:exit'))
    elif mode == 'currency':
        for elem in Currency:
            if current == elem.name:
                markup.add(InlineKeyboardButton(f'{elem.value}  ‚òë', callback_data=f'settings:currency:{elem.name}'))
            else:
                markup.add(InlineKeyboardButton(f'{elem.value}', callback_data=f'settings:currency:{elem.name}'))
        markup.add(InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='settings:currency:exit'))

    return markup


def yes_no_markup() -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∏ –¥–∞/–Ω–µ—Ç –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –æ—Ç–µ–ª—è"""
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton('‚úÖ –î–∞', callback_data=photo_callback.new(answer='yes')))
    markup.add(InlineKeyboardButton('‚ùå –ù–µ—Ç', callback_data=photo_callback.new(answer='no')))

    return markup


def destination_markup(destinations: List) -> InlineKeyboardMarkup:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞.
    :param destinations: —Å–ø–∏—Å–æ–∫, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: markup
    :rtype: InlineKeyboardMarkup
    """
    markup = InlineKeyboardMarkup()
    for item in destinations:
        markup.add(InlineKeyboardButton(
            f'{item["caption"]}',
            callback_data=destination_callback.new(destination_id=item['destinationId']))
        )

    return markup


def link_markup(caption: str, url: str):
    """
    –ö–Ω–æ–ø–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—Ç–µ–ª—è.
    :param caption: –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–Ω–æ–ø–∫–∏
    :param url: url —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    :return: markup
    :rtype: InlineKeyboardMarkup
    """
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton(caption, url=url))

    return markup


def calendar_days_markup(year: int, month: int, limit_date: Optional[date] = None) -> InlineKeyboardMarkup:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç –∑–∞–µ–∑–¥–∞/–≤—ã–µ–∑–¥–∞.
    :param year: —Ç–µ–∫—É—â–∏–π –≥–æ–¥
    :param month: –º–µ—Å—è—Ü
    :param limit_date: –¥–∞—Ç–∞, –æ—Ç –∫–æ—Ç–æ—Ä–æ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–Ω–∏ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ (–¥–Ω–∏ –º–µ–Ω—å—à–µ —ç—Ç–æ–π –¥–∞—Ç—ã –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –ø—É—Å—Ç—ã–º–∏ –∫–ª–µ—Ç–∫–∞–º–∏)
    :return: markup
    :rtype: InlineKeyboardMarkup
    """
    keyboard = InlineKeyboardMarkup(row_width=7)

    keyboard.add(
        InlineKeyboardButton(
            text=date(year=year, month=month, day=1).strftime('%b %Y'),
            callback_data=EMTPY_FIELD
        )
    )
    keyboard.add(*[InlineKeyboardButton(text=day, callback_data=EMTPY_FIELD) for day in WEEK_DAYS])
    for week in calendar.Calendar().monthdayscalendar(year=year, month=month):
        week_buttons = []
        for day in week:
            day_name = ' '
            if day == limit_date.day and limit_date.year == year and limit_date.month == month:
                day_name = 'üîò'
                button = InlineKeyboardButton(
                    text=day_name,
                    callback_data=date_choice_callback.new(year=year, month=month, day=limit_date.day)
                )
            elif day != 0:
                curr_date = date(year=year, month=month, day=day)
                if curr_date > limit_date:
                    day_name = str(day)
                    button = InlineKeyboardButton(
                        text=day_name,
                        callback_data=date_choice_callback.new(year=year, month=month, day=day_name)
                    )
                else:
                    button = InlineKeyboardButton(text=day_name, callback_data=EMTPY_FIELD)
            else:
                button = InlineKeyboardButton(text=day_name, callback_data=EMTPY_FIELD)
            week_buttons.append(button)
        keyboard.add(*week_buttons)

    previous_date = date(year=year, month=month, day=1) - timedelta(days=1)
    next_date = date(year=year, month=month, day=1) + timedelta(days=31)
    if previous_date >= limit_date:
        callback_date = change_month_callback.new(year=previous_date.year, month=previous_date.month)
        text = '‚¨Ö –ø—Ä–µ–¥. –º–µ—Å—è—Ü'
    else:
        callback_date = EMTPY_FIELD
        text = ' '
    keyboard.add(
        InlineKeyboardButton(
            text=text,
            callback_data=callback_date
        ),
        InlineKeyboardButton(
            text='—Å–ª–µ–¥. –º–µ—Å—è—Ü ‚û°',
            callback_data=change_month_callback.new(year=next_date.year, month=next_date.month)
        )
    )

    return keyboard

# TODO –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é

