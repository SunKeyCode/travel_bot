import api
import format
import attributes

from logs import error_log
from CustomExceptions import ApiRequestError
from markup import destination_markup, yes_no_markup, link_markup, calendar_days_markup

from datetime import date
from telebot.types import Message, InputMediaPhoto
from bot import bot, queries, QueryContainer, Steps, Commands
from typing import Callable, Dict
import functools
from re import fullmatch


MAX_HOTELS = 10
MAX_PHOTO = 10


def define_lang(text: str) -> str:
    if fullmatch(r'[–∞-—è–ê-–Ø\W\d]+', text) is not None:
        return 'ru_RU'
    else:
        return 'en_US'


def get_sort_order(command: Commands) -> str:
    if command == Commands.lowprice:
        return 'PRICE'
    elif command == Commands.highprice:
        return 'PRICE_HIGHEST_FIRST'
    elif command == Commands.bestdeal:
        return 'DISTANCE_FROM_LANDMARK'


def track_exception(func: Callable) -> Callable:
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å–∫–ª—é—á–µ–Ω–∏–π KeyError, ApiRequestError –∏ Exception"""
    @functools.wraps(func)
    def wrapper(message: Message, *args, **kwargs):
        try:
            return func(message, *args, **kwargs)
        except KeyError:
            bot.send_message(message.chat.id, '‚ùó –£–ø—Å... –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞. '
                                              '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤—Å—ë —Å –Ω–∞—á–∞–ª–∞.')
        except ApiRequestError:
            bot.send_message(message.chat.id, '‚ùó –£–ø—Å... –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ —Å–µ—Ä–≤–µ—Ä—É. '
                                              '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤—Å—ë —Å –Ω–∞—á–∞–ª–∞.')
        except Exception as exc:
            error_log(exc, '–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ', func.__name__)
            bot.send_message(message.chat.id, '‚ùó –£–ø—Å... –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. '
                                              '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤—Å—ë —Å –Ω–∞—á–∞–ª–∞.')
            print(f'–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ {func.__name__}', exc)

    return wrapper


def print_start_message(message: Message) -> None:
    bot.send_message(message.chat.id, '‚Ñπ –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n\n'
                                      '/lowprice - —Ç–æ–ø —Å–∞–º—ã—Ö –¥–µ—à—ë–≤—ã—Ö –æ—Ç–µ–ª–µ–π –≤ –≥–æ—Ä–æ–¥–µ.\n'
                                      '/highprice - —Ç–æ–ø —Å–∞–º—ã—Ö –¥–æ—Ä–æ–≥–∏—Ö –æ—Ç–µ–ª–µ–π –≤ –≥–æ—Ä–æ–¥–µ.\n'
                                      '/bestdeal - —Ç–æ–ø –æ—Ç–µ–ª–µ–π, '
                                      '–Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ —Ü–µ–Ω–µ –∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—é –æ—Ç —Ü–µ–Ω—Ç—Ä–∞.\n'
                                      '/history - –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞ –æ—Ç–µ–ª–µ–π.')


def first_step(message: Message, command: Commands) -> None:
    """–ü–µ—Ä–≤—ã–π —à–∞–≥ –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥, –∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥—ã history"""
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:')
    queries[message.chat.id]: Dict[QueryContainer] = QueryContainer(user=message.chat.id, command=command)
    bot.register_next_step_handler(message, print_destinations)


def next_step(message: Message, curr_step: Steps) -> None:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–π –∫–æ–º–∞–Ω–¥—ã"""
    if curr_step == Steps.destination:
        get_date(message, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞ üìÖ:')
    elif curr_step == Steps.checkin_date:
        get_date(message, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞ üìÖ:')
    elif curr_step == Steps.checkout_date:
        if queries[message.chat.id].command in (Commands.lowprice, Commands.highprice):
            bot.send_message(message.chat.id, text=f'–°–∫–æ–ª—å–∫–æ –æ—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑–∞—Ç—å? –ù–µ –±–æ–ª—å—à–µ {MAX_HOTELS}')
            bot.register_next_step_handler(message, show_photo)
        elif queries[message.chat.id].command == Commands.bestdeal:
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª ‚Üî \n–ø—Ä–∏–º–µ—Ä: 50 100')
            bot.register_next_step_handler(message, get_price_range)


@track_exception
def print_destinations(message: Message) -> None:

    lang = define_lang(message.text)

    queries[message.chat.id].language = lang

    response = api.get_destinations(message.text, language=lang)
    destinations = attributes.destinations(response)
    queries[message.chat.id].destinations = attributes.destinations_dict(response)

    if destinations:
        markup = destination_markup(destinations)
        bot.send_message(message.chat.id, f'–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç üëáüëáüëá', reply_markup=markup)
    else:
        bot.send_message(message.chat.id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–µ–ª –ø–æ –í–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É...')
        print_start_message(message)


def get_date(message: Message, text: str):
    now = date.today()
    bot.send_message(message.chat.id, text, reply_markup=calendar_days_markup(now.year, now.month))


def get_price_range(message: Message) -> None:

    try:
        prices = list(map(int, message.text.split()))

        if len(prices) != 2:
            raise ValueError
        for value in prices:
            if int(value) < 0:
                raise ValueError
        if min(prices) == 0:
            queries[message.chat.id].min_price = 1
        else:
            queries[message.chat.id].min_price = min(prices)
        queries[message.chat.id].max_price = max(prices)
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞:')
        bot.register_next_step_handler(message, get_max_distance)
    except (TypeError, ValueError):
        bot.send_message(message.chat.id, '‚ùå –í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')
        next_step(message, Steps.checkout_date)


def get_max_distance(message: Message) -> None:
    try:
        if float(message.text) > 0:
            queries[message.chat.id].max_distance = float(message.text)
            bot.send_message(message.chat.id, text=f'–°–∫–æ–ª—å–∫–æ –æ—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑–∞—Ç—å? –ù–µ –±–æ–ª—å—à–µ {MAX_HOTELS}')
            bot.register_next_step_handler(message, show_photo)
        else:
            raise ValueError
    except (TypeError, ValueError):
        bot.send_message(message.chat.id, '‚ùå –û-–æ—É... –≤—ã —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ –≤–≤–µ–ª–∏. –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç–∞ –¥–æ–ª–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—Å—è '
                                          '—á–∏—Å–ª–æ–º –∏ –±—ã—Ç—å –±–æ–ª—å—à–µ 0, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:')
        bot.register_next_step_handler(message, get_max_distance)


def show_photo(message):
    if not message.text.isdigit():
        bot.send_message(message.chat.id, '‚ùå –û-–æ—É! –¢—É—Ç –Ω—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —Ü–∏—Ñ—Ä—É.')
        bot.register_next_step_handler(message, show_photo)
        return
    elif (int(message.text) < 1) or (int(message.text) > MAX_HOTELS):
        bot.send_message(message.chat.id, f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ {MAX_HOTELS}')
        bot.register_next_step_handler(message, show_photo)
        return

    queries[message.chat.id].hotel_count = int(message.text)

    markup = yes_no_markup()
    bot.send_message(message.chat.id, '–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ç–æ –æ—Ç–µ–ª–µ–π?', reply_markup=markup)


@track_exception
def print_hotels(message: Message, no_photo: bool = True) -> None:
    if queries[message.chat.id].min_price is None or queries[message.chat.id].max_price is None:
        price_range = None
    else:
        price_range = (queries[message.chat.id].min_price, queries[message.chat.id].max_price)
    if no_photo:
        hotels = attributes.hotels(
            api.hotels_by_destination(
                destination_id=queries[message.chat.id].destination_id,
                check_in=queries[message.chat.id].checkin_date.strftime('%Y-%m-%d'),
                check_out=queries[message.chat.id].checkout_date.strftime('%Y-%m-%d'),
                language=queries[message.chat.id].language,
                # language='en_US',
                sort_order=get_sort_order(queries[message.chat.id].command),
                price_range=price_range
            ),
            limit=queries[message.chat.id].hotel_count,
            max_distance=queries[message.chat.id].max_distance
        )
        if not hotels:
            bot.send_message(message.chat.id, 'üòû –ü–æ –í–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ—Ç–µ–ª—è... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ '
                                              '–∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä —Ä–∞—Å—à–∏—Ä–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω).')
            print_start_message(message)
            return
        date_delta = queries[message.chat.id].checkout_date - queries[message.chat.id].checkin_date
        for i_hotel in hotels:
            url = f'https://www.hotels.com/ho{attributes.get_hotel_id(i_hotel)}'
            markup = link_markup('–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—Ç–µ–ª—è üîó', url)
            bot.send_message(
                message.chat.id, format.format_hotel(i_hotel, date_delta.days),
                parse_mode='HTML', reply_markup=markup
            )
        print_start_message(message)
    else:
        bot.register_next_step_handler(message, _print_hotels)


@track_exception
def _print_hotels(message: Message) -> None:
    """–ü–µ—á–∞—Ç–∞–µ—Ç –æ—Ç–µ–ª–∏ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏"""
    if not message.text.isdigit():
        bot.send_message(message.chat.id, '–û-–æ—É! –¢—É—Ç –Ω—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —Ü–∏—Ñ—Ä—É.')
        bot.register_next_step_handler(message, _print_hotels)
        return
    elif (int(message.text) < 1) or (int(message.text) > MAX_HOTELS):
        bot.send_message(message.chat.id, f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ {MAX_PHOTO}')
        bot.register_next_step_handler(message, _print_hotels)
        return

    if queries[message.chat.id].min_price is None or queries[message.chat.id].max_price is None:
        price_range = None
    else:
        price_range = (queries[message.chat.id].min_price, queries[message.chat.id].max_price)

    bot.send_message(message.chat.id, '–ò—â–µ–º –æ—Ç–µ–ª–∏... ‚åõ')

    hotels = attributes.hotels(
        api.hotels_by_destination(
            destination_id=queries[message.chat.id].destination_id,
            check_in=queries[message.chat.id].checkin_date.strftime('%Y-%m-%d'),
            check_out=queries[message.chat.id].checkout_date.strftime('%Y-%m-%d'),
            language=queries[message.chat.id].language,
            sort_order=get_sort_order(queries[message.chat.id].command),
            price_range=price_range
        ),
        limit=queries[message.chat.id].hotel_count,
        max_distance=queries[message.chat.id].max_distance
    )

    if not hotels:
        bot.send_message(message.chat.id, 'üòû –ü–æ –í–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ—Ç–µ–ª—è... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ '
                                          '–∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä —Ä–∞—Å—à–∏—Ä–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω).')
        print_start_message(message)
        return

    queries[message.chat.id].photo_count = int(message.text)
    date_delta = queries[message.chat.id].checkout_date - queries[message.chat.id].checkin_date
    for i_hotel in hotels:
        hotel_id = attributes.get_hotel_id(i_hotel)
        photo_data = api.get_photo(hotel_id)

        media = list()
        for photo in attributes.photo(data=photo_data, limit=queries[message.chat.id].photo_count):
            media.append(InputMediaPhoto(format.format_photo(photo, 'z'), i_hotel['name']))
        url = f'https://www.hotels.com/ho{hotel_id}'
        markup = link_markup('–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—Ç–µ–ª—è üîó', url)
        bot.send_media_group(message.chat.id, media)
        bot.send_message(
            message.chat.id, format.format_hotel(i_hotel, date_delta.days),
            parse_mode='HTML', reply_markup=markup
        )

    print_start_message(message)
