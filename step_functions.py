from utils.hotels_api import api
from utils import attributes, format
from utils.misc.other_func import define_lang, get_sort_order
import keyboards.inline.inline_markup as inline_markup
import logs.logs as log

from utils.CustomExceptions import ApiRequestError, UnexpectedException
from datetime import date
from telebot.types import Message, InputMediaPhoto
from loader import bot, queries, QueryContainer, Steps, Commands
from typing import Callable, Dict
import functools
from database.DB import write_history, get_currency, get_locale
from config_data import config


def track_exception(func: Callable) -> Callable:
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å–∫–ª—é—á–µ–Ω–∏–π KeyError, ApiRequestError –∏ UnexpectedException"""
    @functools.wraps(func)
    def wrapper(message: Message, *args, **kwargs):
        try:
            return func(message, *args, **kwargs)
        except KeyError:
            bot.send_message(message.chat.id, '‚ùó –£–ø—Å... –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞. '
                                              '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤—Å—ë —Å–Ω–∞—á–∞–ª–∞.')
            print_start_message(message)
        except ApiRequestError:
            bot.send_message(message.chat.id, '‚ùó –£–ø—Å... –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ —Å–µ—Ä–≤–µ—Ä—É. '
                                              '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤—Å—ë —Å–Ω–∞—á–∞–ª–∞.')
            print_start_message(message)
        except UnexpectedException as exc:
            log.error_log(exc, '–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ', func.__name__)
            bot.send_message(message.chat.id, '‚ùó –£–ø—Å... –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. '
                                              '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤—Å—ë —Å–Ω–∞—á–∞–ª–∞.')
            print(f'–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ {func.__name__}', exc)
            print_start_message(message)

    return wrapper


def print_start_message(message: Message) -> None:
    """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥"""
    bot.send_message(message.chat.id, '‚Ñπ –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n\n'
                                      '/lowprice - —Ç–æ–ø —Å–∞–º—ã—Ö –¥–µ—à—ë–≤—ã—Ö –æ—Ç–µ–ª–µ–π –≤ –≥–æ—Ä–æ–¥–µ.\n'
                                      '/highprice - —Ç–æ–ø —Å–∞–º—ã—Ö –¥–æ—Ä–æ–≥–∏—Ö –æ—Ç–µ–ª–µ–π –≤ –≥–æ—Ä–æ–¥–µ.\n'
                                      '/bestdeal - —Ç–æ–ø –æ—Ç–µ–ª–µ–π, '
                                      '–Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ —Ü–µ–Ω–µ –∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—é –æ—Ç —Ü–µ–Ω—Ç—Ä–∞.\n'
                                      '/history - –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞ –æ—Ç–µ–ª–µ–π.\n'
                                      '/settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞.\n'
                                      '/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.'
                     )


def load_settings(message: Message) -> None:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î –¥–ª—è —Ç–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    queries[message.chat.id].currency = get_currency(message)
    queries[message.chat.id].locale = get_locale(message)
    if queries[message.chat.id].locale == 'en_US':
        queries[message.chat.id].distance_units = 'miles'
    elif queries[message.chat.id].locale == 'ru_RU':
        queries[message.chat.id].distance_units = 'km'
    else:
        queries[message.chat.id].distance_units = 'miles'


def first_step(message: Message, command: Commands) -> None:
    """–ü–µ—Ä–≤—ã–π —à–∞–≥ –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥, –∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥—ã history"""
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:')
    queries[message.chat.id]: Dict[QueryContainer] = QueryContainer(user_id=int(message.chat.id), command=command)
    load_settings(message)
    bot.register_next_step_handler(message, print_destinations)


def next_step(message: Message, curr_step: Steps) -> None:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–π –∫–æ–º–∞–Ω–¥—ã.
    :param curr_step: —à–∞–≥, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.
    """
    curr_setting = queries[message.chat.id].currency
    if curr_setting == 'USD':
        currency = '–¥–æ–ª–ª–∞—Ä–∞—Ö'
        price_range = '50 100'
    elif curr_setting == 'RUB':
        currency = '—Ä—É–±–ª—è—Ö'
        price_range = '1000 5000'
    else:
        currency = '–¥–æ–ª–ª–∞—Ä–∞—Ö'
        price_range = '50 100'

    if curr_step == Steps.destination:
        print_calendar(message, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞ üìÖ:', date.today())
    elif curr_step == Steps.checkin_date:
        print_calendar(message, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞ üìÖ:', queries[message.chat.id].checkin_date)
    elif curr_step == Steps.checkout_date:
        if queries[message.chat.id].command in (Commands.lowprice, Commands.highprice):
            bot.send_message(message.chat.id, text=f'–°–∫–æ–ª—å–∫–æ –æ—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑–∞—Ç—å? –ù–µ –±–æ–ª—å—à–µ {config.MAX_HOTELS}')
            bot.register_next_step_handler(message, get_hotels_count)
        elif queries[message.chat.id].command == Commands.bestdeal:
            bot.send_message(
                message.chat.id,
                f'–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω (–≤ {currency}) —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, \n<b>–ø—Ä–∏–º–µ—Ä</b>: {price_range}',
                parse_mode='HTML'
            )
            bot.register_next_step_handler(message, get_price_range)


@track_exception
def print_destinations(message: Message) -> None:
    """–ü–µ—á–∞—Ç–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Å—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"""
    lang = define_lang(message.text)

    queries[message.chat.id].language = lang

    response = api.get_destinations(message.text, language=lang)
    destinations = attributes.destinations(response)
    queries[message.chat.id].destinations = attributes.destinations_dict(response)

    if destinations:
        markup = inline_markup.destination_markup(destinations)
        bot.send_message(message.chat.id, f'–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç üëá', reply_markup=markup)
    else:
        bot.send_message(message.chat.id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–µ–ª –ø–æ –í–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É...')
        print_start_message(message)


def print_calendar(message: Message, text: str, limit_date: date):
    """–ü–µ—á–∞—Ç–∞–µ—Ç —Ä–∞–∑–º–µ—Ç–∫—É –∫–∞–ª–µ–Ω–¥–∞—Ä—è –≤ —á–∞—Ç–µ"""
    now = date.today()
    bot.send_message(
        chat_id=message.chat.id,
        text=text,
        reply_markup=inline_markup.calendar_days_markup(now.year, limit_date.month, limit_date)
    )


def get_price_range(message: Message) -> None:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω –¥–ª—è –∫–æ–º–∞–Ω–¥—ã bestdeal –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if queries[message.chat.id].distance_units == 'miles':
        distance_unt = '–≤ –º–∏–ª–ª—è—Ö'
    elif queries[message.chat.id].distance_units == 'km':
        distance_unt = '–≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö'
    else:
        distance_unt = '–≤ –º–∏–ª–ª—è—Ö'

    try:
        prices = list(map(int, message.text.split()))

        if len(prices) != 2:
            raise ValueError
        for value in prices:
            if int(value) < 0:
                raise ValueError
        if min(prices) == 0:
            queries[message.chat.id].min_price = 1
        else:
            queries[message.chat.id].min_price = min(prices)
        queries[message.chat.id].max_price = max(prices)
        bot.send_message(message.chat.id, f'–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ ({distance_unt}):')
        bot.register_next_step_handler(message, get_max_distance)
    except (TypeError, ValueError):
        bot.send_message(message.chat.id, '‚ùå –í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')
        next_step(message, Steps.checkout_date)


def get_max_distance(message: Message) -> None:
    """–ü–æ–ª—É—á–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã bestdeal –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        if float(message.text) > 0:
            queries[message.chat.id].max_distance = float(message.text)
            bot.send_message(message.chat.id, text=f'–°–∫–æ–ª—å–∫–æ –æ—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑–∞—Ç—å? –ù–µ –±–æ–ª—å—à–µ {config.MAX_HOTELS}')
            bot.register_next_step_handler(message, get_hotels_count)
        else:
            raise ValueError
    except (TypeError, ValueError):
        bot.send_message(message.chat.id, '‚ùå –û-–æ—É... –≤—ã —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ –≤–≤–µ–ª–∏. –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç–∞ –¥–æ–ª–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—Å—è '
                                          '—á–∏—Å–ª–æ–º –∏ –±—ã—Ç—å –±–æ–ª—å—à–µ 0 (–Ω–∞–ø—Ä–∏–º–µ—Ä 3.5 –∏–ª–∏ 5), –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:')
        bot.register_next_step_handler(message, get_max_distance)


def get_hotels_count(message):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π –¥–ª—è –≤—ã–≤–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not message.text.isdigit():
        bot.send_message(message.chat.id, '‚ùå –û-–æ—É! –¢—É—Ç –Ω—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —Ü–∏—Ñ—Ä—É.')
        bot.register_next_step_handler(message, get_hotels_count)
        return
    elif (int(message.text) < 1) or (int(message.text) > config.MAX_HOTELS):
        bot.send_message(message.chat.id, f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ {config.MAX_HOTELS}')
        bot.register_next_step_handler(message, get_hotels_count)
        return

    queries[message.chat.id].hotel_count = int(message.text)

    markup = inline_markup.yes_no_markup()
    bot.send_message(message.chat.id, '–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ç–æ –æ—Ç–µ–ª–µ–π?', reply_markup=markup)


@track_exception
def print_hotels(message: Message) -> None:
    """–ü–µ—á–∞—Ç–∞–µ—Ç –æ—Ç–µ–ª–∏ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –∏–ª–∏ –±–µ–∑"""
    if queries[message.chat.id].show_photo:
        if not message.text.isdigit():
            bot.send_message(message.chat.id, '–û-–æ—É! –¢—É—Ç –Ω—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —Ü–∏—Ñ—Ä—É.')
            bot.register_next_step_handler(message, print_hotels)
            return
        elif (int(message.text) < 1) or (int(message.text) > config.MAX_PHOTO):
            bot.send_message(message.chat.id, f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ {config.MAX_PHOTO}')
            bot.register_next_step_handler(message, print_hotels)
            return
        bot.send_message(message.chat.id, '–ò—â–µ–º –æ—Ç–µ–ª–∏... ‚åõ')
        queries[message.chat.id].photo_count = int(message.text)

    if queries[message.chat.id].min_price is None or queries[message.chat.id].max_price is None:
        price_range = None
    else:
        price_range = (queries[message.chat.id].min_price, queries[message.chat.id].max_price)

    currency = queries[message.chat.id].currency

    hotels = attributes.hotels(
        api.hotels_by_destination(
            destination_id=queries[message.chat.id].destination_id,
            check_in=queries[message.chat.id].checkin_date.strftime('%Y-%m-%d'),
            check_out=queries[message.chat.id].checkout_date.strftime('%Y-%m-%d'),
            locale=queries[message.chat.id].locale,
            sort_order=get_sort_order(queries[message.chat.id].command),
            price_range=price_range,
            currency=currency
        ),
        limit=queries[message.chat.id].hotel_count,
        max_distance=queries[message.chat.id].max_distance
    )

    queries[message.chat.id].hotels = hotels

    write_history(queries[message.chat.id])

    if not hotels:
        bot.send_message(message.chat.id, 'üòû –ü–æ –í–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ—Ç–µ–ª—è... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ '
                                          '–∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä —Ä–∞—Å—à–∏—Ä–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω).')
        print_start_message(message)
        return

    date_delta = queries[message.chat.id].checkout_date - queries[message.chat.id].checkin_date

    if queries[message.chat.id].show_photo:
        for i_hotel in hotels:
            hotel_id = attributes.get_hotel_id(i_hotel)
            photo_data = api.get_photo(hotel_id)

            media = list()
            for photo in attributes.photo(data=photo_data, limit=queries[message.chat.id].photo_count):
                media.append(InputMediaPhoto(format.format_photo(photo, 'z'), i_hotel['name']))
            url = f'https://www.hotels.com/ho{hotel_id}'
            markup = inline_markup.link_markup('–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—Ç–µ–ª—è üîó', url)
            bot.send_media_group(message.chat.id, media)
            bot.send_message(
                message.chat.id, format.format_hotel(i_hotel, date_delta.days, currency),
                parse_mode='HTML', reply_markup=markup
            )
    else:
        for i_hotel in hotels:
            url = f'https://www.hotels.com/ho{attributes.get_hotel_id(i_hotel)}'
            markup = inline_markup.link_markup('–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—Ç–µ–ª—è üîó', url)
            bot.send_message(
                message.chat.id, format.format_hotel(i_hotel, date_delta.days, currency),
                parse_mode='HTML', reply_markup=markup
            )
    print_start_message(message)

# TODO –≤—ã–Ω–µ—Å—Ç–∏ —Ñ–∞–π–ª –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
# TODO –¥–æ–ø–∏—Å–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º

